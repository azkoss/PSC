package cn.wellcare.portal.controller.payment.accpay;

import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.wellcare.api.acc.IPscPiAccService;
import cn.wellcare.api.trade.IPscAccPaymentService;
import cn.wellcare.core.constant.BaseParam;
import cn.wellcare.core.constant.Constants;
import cn.wellcare.core.constant.PaymentType;
import cn.wellcare.core.exception.BusinessException;
import cn.wellcare.core.exception.ErrorEnum;
import cn.wellcare.core.exception.UnauthorizedException;
import cn.wellcare.core.utils.CommonUtils;
import cn.wellcare.entity.order.PayOrder;
import cn.wellcare.payment.api.PaymentApi;
import cn.wellcare.payment.order.IOrderService;
import cn.wellcare.pojo.account.PscPiAcc;
import cn.wellcare.pojo.common.PaymentResult;
import cn.wellcare.pojo.common.RpcResult;
import cn.wellcare.pojo.common.ServiceResult;
import cn.wellcare.web.BaseController;

@RequestMapping(Constants.ACCOUNT_PAY)
@Controller
public class AccRechargeController extends BaseController {
	protected Logger log = Logger.getLogger(this.getClass());

	@Resource(name = "accRechargeService")
	private PaymentApi accRechargeService;

	@Resource(name = "pscAccPaymentService")
	private IPscAccPaymentService accountPayService;

	@Resource(name = "pscPiAccService")
	private IPscPiAccService pscPiAccService;

	@Resource(name = "orderService")
	private IOrderService orderService;

	/**
	 * 账户充值<br>
	 * 支付方式：微信、支付宝、MISPOS被动扫码，现金
	 * 
	 * @param request
	 * @param response
	 * @param params
	 * @return
	 */
	@RequestMapping(value = Constants.ACCOUNT_RECHARGE, produces = Constants.CONTENT_TYPE_JSON)
	@ResponseBody
	public ServiceResult<PaymentResult> accRecharge(HttpServletRequest request, HttpServletResponse response,
			@RequestParam Map<String, Object> params) {
		RpcResult<PaymentResult> result = new RpcResult<>();
		try {
			// 1.参数检查
			Assert.notNull(params.get(BaseParam.PAY_TYPE));
			Assert.notNull(params.get(BaseParam.PAY_AMOUNT));
			Assert.notNull(params.get(BaseParam.CLIENT_TRADE_TIME));

			// 2.账户状态
			RpcResult<cn.wellcare.acc.entity.PscPiAcc> sr = pscPiAccService
					.getPscPiAccBypkPi((String) params.get(BaseParam.USER_ID));
			if (CommonUtils.isNull(sr.getData())) {
				throw new BusinessException("找不到账户");
			}
			cn.wellcare.acc.entity.PscPiAcc acc = sr.getData();
			if (PscPiAcc.ACC_ENABLE != Integer.valueOf(acc.getEuStatus())) {
				throw new BusinessException("账户不可用");
			}
			params.put(BaseParam.CLIENT_IP, CommonUtils.getRemoteIpAddr(request));
			// TODO 业务通知地址，由业务系统提供
			// params.put(BaseParam.BACK_URL, DomainUrlUtil.PSC_PAYMENT_URL +
			// "/demo/serverNotify");

			// 3.交易收款
			String payType = PaymentType.getPaymentCodeByNameOrCode((String) params.get(BaseParam.RECHARGE_TYPE));
			Integer orderId = null;
			if (PaymentType.MISPOS.getPaymentCode().equals(payType)
					|| PaymentType.MISPOS.getPaymentName().equals(payType)) {
				// 订单是否存在
				String ordersn = (String) params.get(BaseParam.ORDER_ID);
				RpcResult<PayOrder> orderresult = orderService.getOrderByOuterSn(ordersn);
				if (!orderresult.isSuccess() || orderresult.getData() == null) {
					throw new BusinessException(ErrorEnum.ORDER_NOT_EXISTS_EXCEPTION.getErrDesc());
				}
				orderId = orderresult.getData().getId();
			} else {
				// 收款
				result = accRechargeService.doPay(params);
				orderId = result.getData().getOrderId();
			}

			if (!result.isSuccess()) {
				throw new BusinessException(Constants.RECHARGE_FAIL);
			}


			// 4.账户充值
			params.put(BaseParam.ORDER_ID, orderId);
			params.put(BaseParam.USER_ID, acc.getPkPiacc());
			RpcResult<PaymentResult> accres = accountPayService.accRecharge(params);
			if (!accres.isSuccess()) {
				// TODO 退款
				throw new BusinessException(Constants.RECHARGE_FAIL);
			}
		} catch (Exception e) {
			result.setSuccess(false);
			if (e instanceof BusinessException) {
				BusinessException pe = (BusinessException) e;
				if (pe.getCode() != null && ErrorEnum.BUSINESS_EXCEPTION.getErrCode().equals(pe.getCode()))
					result.setMsgInfo(ErrorEnum.BUSINESS_EXCEPTION.getErrDesc());
				else
					result.setMsgInfo(e.getMessage());
				result.setMsgCode(ErrorEnum.BUSINESS_EXCEPTION.getErrCode());
			} else {
				if (e instanceof UnauthorizedException) {
					result.setError(ErrorEnum.UNAUTHORIZED_EXCEPTION);
				} else {
					e.printStackTrace();
					result.setMsgInfo(ErrorEnum.SERVER_EXCEPTION.getErrDesc());
				}
			}
		}
		return new ServiceResult<PaymentResult>().convert2SR(result);
	}

}
